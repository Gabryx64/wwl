.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __main_locals 1

.SECTION ".text_0x0" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l consoleInit
; load 0
; type 132 reg 0x52f0 extra 0x0
; ld4 #bg_end + 0, tcc__r0 (type 0x84)
lda.w #:bg_end
sta.b tcc__r0h
lda.w #bg_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x52f0 extra 0x0
; ld4 #bg + 0, tcc__r1 (type 0x84)
lda.w #:bg
sta.b tcc__r1h
lda.w #bg + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 8192
; push2 imm r 0xf0
pea.w 256
; push2 imm r 0xf0
pea.w 512
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x52f0
pea.w :bg_palette
pea.w bg_palette + 0
; push4 imm r 0x52f0
pea.w :bg
pea.w bg + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; call r 0x2f0
jsr.l WaitForVBlank
; load 0
; type 132 reg 0x52f0 extra 0x0
; ld4 #bg_map_end + 0, tcc__r0 (type 0x84)
lda.w #:bg_map_end
sta.b tcc__r0h
lda.w #bg_map_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x52f0 extra 0x0
; ld4 #bg_map + 0, tcc__r1 (type 0x84)
lda.w #:bg_map
sta.b tcc__r1h
lda.w #bg_map + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 24576
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :bg_map
pea.w bg_map + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 132 reg 0x52f0 extra 0x0
; ld4 #sprites_end + 0, tcc__r0 (type 0x84)
lda.w #:sprites_end
sta.b tcc__r0h
lda.w #sprites_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x52f0 extra 0x0
; ld4 #sprites + 0, tcc__r1 (type 0x84)
lda.w #:sprites
sta.b tcc__r1h
lda.w #sprites + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x52f0 extra 0x0
; ld4 #sprites_palette_end + 0, tcc__r1 (type 0x84)
lda.w #:sprites_palette_end
sta.b tcc__r1h
lda.w #sprites_palette_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x52f0 extra 0x0
; ld4 #sprites_palette + 0, tcc__r2 (type 0x84)
lda.w #:sprites_palette
sta.b tcc__r2h
lda.w #sprites_palette + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #96
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; push4 imm r 0x52f0
pea.w :sprites_palette
pea.w sprites_palette + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :sprites
pea.w sprites + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; call r 0x2f0
jsr.l setScreenOn
; gsym_addr t 0 a 3638 ind 3638
; ERROR no jump found to patch
; gtst inv 0 t 0 v 240 r 3701 ind 3701
; uncond jump: nop
; gtst finished; t 0
; gsym_addr t 0 a 156 ind 3780
; ERROR no jump found to patch
; gsym_addr t 0 a 3842 ind 3842
; ERROR no jump found to patch
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -1 + __main_locals + 1,s
rep #$20
__local_2:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #128
ldx #1
lda.b tcc__r0
sec
sbc.w #128
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 4451 ind 4451
; gsym_addr t 0 a 4488 ind 4488
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4607 ind 4607
; cmp op 0x95 inv 1 v 243 r 4607
; cmp ne
bne +
; gsym_addr t 0 a 4694 ind 4694
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 4607
; gjmp_addr 0 at 4797
jmp.w __local_1
; gsym_addr t 4835 a 0 ind 4835
__local_3:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x566109f9
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -1 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -1 + __main_locals + 1,s
rep #$20
; gjmp_addr 4147 at 5455
jmp.w __local_2
; gsym_addr t 5496 a 4147 ind 5496
__local_1:
; gsym_addr t 4835 a 5531 ind 5531
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r1
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __main_locals + 1,s
rep #$20
sta.b tcc__r1
; gen_opi len 2 op %
; div #16, tcc__r1
ldx.b tcc__r1
lda.w #16
jsr.l tcc__div
stx.b tcc__r1
; gen_opi len 2 op 
; shl tcc__r1, #4
lda.b tcc__r1
asl a
asl a
asl a
asl a
sta.b tcc__r1
; load 2
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r2
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __main_locals + 1,s
rep #$20
sta.b tcc__r2
; gen_opi len 2 op /
; div #16, tcc__r2
ldx.b tcc__r2
lda.w #16
jsr.l tcc__div
lda.b tcc__r9
sta.b tcc__r2
; gen_opi len 2 op 
; shl tcc__r2, #4
lda.b tcc__r2
asl a
asl a
asl a
asl a
sta.b tcc__r2
; load 3
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r3
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __main_locals + 1,s
rep #$20
sta.b tcc__r3
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x3
; ldpush2 (type 0x10 reg 0x3) tcc__r3
pei (tcc__r3)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; gsym_addr t 0 a 7779 ind 7779
; gtst inv 0 t 0 v 240 r 7811 ind 7811
; uncond jump: nop
; gtst finished; t 0
; gsym_addr t 0 a 5566 ind 7890
; gsym_addr t 0 a 7922 ind 7922
; gjmp_addr 4867 at 7954
jmp.w __local_3
; gsym_addr t 7995 a 4867 ind 7995
__local_0:
; gsym_addr t 4607 a 8030 ind 8030
; gsym_addr t 0 a 4867 ind 8065
__local_4:
; gtst inv 1 t 0 v 240 r 8097 ind 8097
; uncond jump: nop
; gtst finished; t 0
; call r 0x2f0
jsr.l WaitForVBlank
; gjmp_addr 8097 at 8211
jmp.w __local_4
; gsym_addr t 8252 a 8097 ind 8252
; gsym_addr t 0 a 8287 ind 8287
; gsym_addr t 0 a 8097 ind 8319
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 8428
jmp.w __local_5
; gsym_addr t 8466 a 0 ind 8466
__local_5:
; gsym_addr t 8466 a 8498 ind 8498
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramtmpxfile1rHMSX.data" APPENDTO "globram.data"
__local_dummytmpxfile1rHMSX.data dsb 1

.ENDS

.SECTION "tmpxfile1rHMSX.data" APPENDTO "glob.data"

__local_dummytmpxfile1rHMSX.data: .db 0
.ENDS

.SECTION ".rodata" SUPERFREE

__local_dummytmpxfile1rHMSX.rodata: .db 0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
__local_dummybss dsb 1
.ENDS
